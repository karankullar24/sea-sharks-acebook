@using Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal
@using System.Linq
@using acebook.Controllers

@model acebook.Models.Post

<!-- Individual Post -->
<div class="flex flex-col items-center w-full">
    <div class="fixed top-20 z-40 w-full bg-white shadow-[inset_0_-1px_2px_rgba(0,0,0,0.05)]">
        <h1 id="splash-heading" class="mt-2 pb-2 font-bold text-center text-teal-700 text-xl">@Model.User.FirstName's
            Splash</h1>
    </div>
    <div class="bg-white mt-10 rounded-t-lg w-2/3 p-4 shadow-[0_0_15px_rgba(15,118,110,0.3)] z-30">
        <div class="flex justify-between items-center">
            <h3 class="text-md font-semibold text-gray-800">@Model.User.FirstName @Model.User.LastName</h3>
            <img src="/images/Placeholder.png" class="w-12 h-12 rounded-full object-cover border border-gray-400">
        </div>

        <p id="post-content" data-testid="post-content" class="text-gray-700 mt-2 leading-relaxed">@Model.Content</p>

        <!-- Edit post form --> 
        <form asp-action="Update" asp-controller="Posts" asp-route-id="@Model.Id" method="post" id="update-post-form"
                data-testid="update-post-form" label="update post form" class="hidden">
                <textarea required name="content" label="update post box" id="update-post-input" data-testid="update-post-input"
                    class="border border-gray-300 rounded-md p-2 w-full mt-2" maxlength="2000">@Model.Content</textarea>
                
                <div class="flex justify-end space-x-2">
                    <button type="button" id="cancel-edit-post"
                        class="bg-gray-300 text-gray-800 text-sm w-36 px-4 py-2 rounded-md hover:bg-gray-400 mt-2">Cancel
                    </button>
                    <button id="edit-post-submit" data-testid="edit-post-submit" type="submit"
                        class="bg-teal-600 text-white text-sm font-medium w-36 px-4 py-2 rounded-md hover:bg-teal-400 mt-2">Save Changes
                    </button>
                </div>
            </form>
        
        <!-- Created on and Edit post buttons: -->
        <div class="flex justify-between items-center">
            <p class="text-xs text-gray-400 mt-4">Created on: @Model.FormattedCreatedOn</p>
            @if (Model.UserId == Context.Session.GetInt32("user_id"))
            {
                <button id="edit-post-button" data-testid="edit-post-button" class="bg-white text-grey-600 text-xs font-medium px-3 py-1 rounded-md hover:bg-gray-100 border border-gray-200 shadow-md h-[25px] leading-none">
                    Edit Post
                </button>
            }
        </div>
            

            

    <!-- Buttons under post -->
        <div class="flex border-t border-gray-200 divide-x divide-gray-200 justify-around mt-4 pt-3">
            <button
                class="relative flex-1 inline-flex items-center justify-center overflow-hidden text-gray-600 text-sm bg-transparent group py-2 px-4 font-medium transition-all"
                data-testid = 'post-like-button'
                data-post-id="@Model.Id"
                data-liked="@Model.Likes.Any(l => l.UserId == Context.Session.GetInt32("user_id"))">
                <span
                    class="absolute inset-0 bg-teal-600 right-0 top-0 translate-x-full ease-out duration-500 transition-all group-hover:translate-x-0"></span>
                <span class="relative transition-colors duration-300 ease-in-out group-hover:text-white" data-testid ='post-like-total'>
                    Like (<span class="like-count">@Model.Likes.Count()</span>)
                </span>
            </button>

            <button class="relative flex-1 inline-flex items-center justify-center overflow-hidden text-gray-600 text-sm bg-transparent hover:bg-white group py-2 px-4 font-medium transition-all">
                <span class="absolute inset-0 bg-teal-600 translate-x-full ease-out duration-500 transition-all group-hover:translate-x-0"></span>
                <span class="relative text-gray-600 group-hover:text-white">View Profile</span>
            </button>

            @if (Model.UserId == Context.Session.GetInt32("user_id"))
            {
                <form action="/posts/@Model.Id/delete" method="post" class="flex-1" onsubmit="return confirm('Are you sure you want to delete this post?');">
                    <button data-testid="delete-post-button" type="submit"
                        class="relative w-full inline-flex items-center justify-center overflow-hidden text-gray-600 text-sm bg-transparent hover:bg-white group py-2 px-4 font-medium transition-all">
                        <span class="absolute inset-0 bg-red-600 right-0 top-0 translate-x-full ease-out duration-500 transition-all group-hover:translate-x-0"></span>
                        <span class="relative text-gray-600 group-hover:text-white">Delete Post</span>
                    </button>
                </form>
            }
        </div>
    </div>


    <!-- Background of Comments -->
    <div class="flex flex-col items-center w-2/3 bg-teal-700/10 rounded-b-lg shadow-[0_0_15px_rgba(15,118,110,0.3)] max-h-[70vh] overflow-hidden">
    
        <!-- Comments List -->
        <div class="flex-1 w-full overflow-y-auto px-4 py-4">

            @{
                List<Comment>? comments = ViewBag.comments as List<acebook.Models.Comment>;
            }

            @if (comments == null || !comments.Any())
            {
                <div id="NoCommentsMessage" class="flex items-center justify-center h-full px-4 py-4">
                    <h3 " class=" text-teal-600 font-semibold">No comments yet!</h3>
                </div>
            }

            @foreach (Comment comment in ViewBag.comments)
            {
                <div class="bg-white rounded w-full p-2 mt-2 shadow-md hidden md:flex items-start relative">
                    <img src="/images/Placeholder.png"
                        class="w-8 h-8 rounded-full object-cover border border-gray-400 mr-3">

                    <div class="flex-1">
                        <div class="flex justify-between items-start">
                            <h3 class="text-sm font-semibold text-gray-800">
                                @comment.User.FirstName @comment.User.LastName
                            </h3>

                            <!-- Like button -->
                            <form action="@Url.Action()" method="post">
                                <button
                                    class="comment-like relative inline-flex items-center justify-center overflow-hidden text-gray-600 text-xs bg-transparent group py-1 px-3 font-medium rounded-md transition-all border border-gray-200 shadow-sm"
                                    data-comment-id="@comment.Id"
                                    data-testid="comment-like-button"
                                    data-liked="@comment.Likes.Any(l => l.UserId == Context.Session.GetInt32("user_id"))">
                                    <span
                                        class="absolute inset-0 bg-teal-600 right-0 top-0 translate-x-full ease-out duration-500 transition-all group-hover:translate-x-0"></span>
                                    <span
                                        data-testid="comment-like-total" class="relative flex items-center transition-colors duration-300 ease-in-out group-hover:text-white">
                                        Like (<span class="comment-like-count">@comment.Likes.Count()</span>)
                                    </span>
                                </button>
                            </form>
                        </div>

                        <!-- Comment content  -->
                        <p id="comment_content-@comment.Id" data-testid="comment-text-@comment.Id" class="text-gray-700 text-sm mt-1 leading-snug">@comment.Content</p>
                        
                        <!-- Edit comment form --> 
                        <form asp-action="Update" asp-controller="Comments" asp-route-postId="@Model.Id" asp-route-commentId="@comment.Id" method="post" id="update-comment-form-@comment.Id"
                                data-testid="update-comment-form-@comment.Id" label="update commnent form" class="hidden">
                                <textarea required name="comment_content" label="update comment box" id="update-comment-input-@comment.Id" data-testid="update-comment-input-@comment.Id"
                                    class="border border-gray-300 rounded-md p-2 w-full mt-2" maxlength="2000">@comment.Content</textarea>
                                
                                <div class="flex justify-end space-x-2 mb-2">
                                    <button type="button" id="cancel-edit-comment-@comment.Id"
                                        class="bg-gray-300 text-gray-800 text-sm w-36 px-4 py-2 rounded-md hover:bg-gray-400 mt-2">Cancel
                                    </button>
                                    <button id="edit-comment-submit-@comment.Id" data-testid="edit-comment-submit-@comment.Id" type="submit"
                                        class="bg-teal-600 text-white text-sm font-medium w-36 px-4 py-2 rounded-md hover:bg-teal-400 mt-2">Save Changes
                                    </button>
                                </div>
                            </form>

                        <!-- Commented on AND Edit Comment AND Delete Comment button  -->
                        <div class="flex justify-between items-start">
                            <p class="text-xs text-gray-400 mt-2">Commented on: @comment.FormattedCreatedOn</p>
                            <div class="flex justify-end items-center space-x-2">
                                @if (comment.UserId == Context.Session.GetInt32("user_id") || comment.Post.UserId == Context.Session.GetInt32("user_id"))
                                {
                                    <button id="edit-comment-button-@comment.Id" data-testid="edit-comment-button-@comment.Id" class="bg-teal-600 text-white text-xs font-medium px-3 py-1 rounded-md hover:bg-teal-400 shadow-md h-[25px] leading-none">Edit</button>
                                    <form action="@Url.Action("Delete", "Comments", new { postId = Model.Id, commentId = comment.Id })" method="post" onsubmit="return confirm('Are you sure you want to delete this comment?');" class="inline-flex items-center">
                                        <button data-testid="delete-comment-button-@comment.Id" 
                                                type="submit" 
                                                class="bg-red-500 hover:bg-red-600 text-white text-xs font-medium py-1 px-3 rounded-md shadow-md h-[25px] leading-none">Delete</button> 
                                    </form>
                                }
                            </div>
                        </div>

                    </div>
                </div>
            }
        </div>

        <!-- Add a Comment Box -->
        <div class="bg-white rounded-b-lg w-full px-4 py-2 shadow-[0_0_15px_rgba(15,118,110,0.3)]">
            <h2 class="text-lg font-semibold mb-1">Add a comment</h2>
            <form action="@Url.Action("Create", "Comments")" method="post">
                <input type="hidden" name="returnURL" value="@Url.Action("Post", "Comments", new { id = Model.Id })" />
                <input type="hidden" name="postId" value="@Model.Id" />
                <textarea id="comment-box"
                    class="w-full resize-none border p-1 rounded-md focus:outline-none focus:border-teal-500 focus:ring-2 focus:ring-gray-400 focus:ring-opacity-25 transition-shadow duration-200"
                    name="Content" maxlength="2000" placeholder="Make a splash! (max 2000 characters)"></textarea>
                <div class="flex justify-between items-center mt-0">
                    <label class="flex items-center text-sm text-teal-500 hover:underline">Attach Image</label>
                    <button data-testid="comment-submit" type="submit"
                        class="bg-teal-600 text-white text-sm font-medium px-3 py-1 rounded-md hover:bg-teal-400">
                        Submit
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // -------- Post Likes --------
            const postButtons = document.querySelectorAll('button[data-post-id]'); //Finding the tag i set earlier in the HTML.
            postButtons.forEach(button => { //checking if the post has been liked by the user. 
                const postId = button.dataset.postId;
                let liked = button.dataset.liked === 'True' || button.dataset.liked === 'true'; //Checking if the post is already liked. 
                if (liked) { //Making sure if Liked it holds the same format as the previous page. 
                    const bgSpan = button.querySelector('span.absolute');
                    if (bgSpan) bgSpan.classList.remove('translate-x-full', 'translate-y-full');
                    const textSpan = button.querySelector('span.relative');
                    if (textSpan) textSpan.classList.add('text-white');
                }

                button.addEventListener('click', async () => { //If clicked it will head to the controller to change the like status. 
                    try {
                        const response = await fetch(`/posts/${postId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        if (!response.ok) throw new Error('Network response was not ok');

                        const data = await response.json();
                        const countSpan = button.querySelector('.like-count');
                        if (countSpan) countSpan.textContent = data.likeCount; //Dynamically updates like number based on like/unlike status 

                        liked = !liked; 
                        button.dataset.liked = liked;

                        const bgSpan = button.querySelector('span.absolute');
                        const textSpan = button.querySelector('span.relative');
                        if (liked) {
                            if (bgSpan) bgSpan.classList.remove('translate-x-full', 'translate-y-full');
                            if (textSpan) textSpan.classList.add('text-white');
                        } else {
                            if (bgSpan) bgSpan.classList.add('translate-x-full', 'translate-y-full');
                            if (textSpan) textSpan.classList.remove('text-white');
                        } //above is the formatting for the onclick when liked or unliked. 
                    } catch (err) {
                        console.error('Error toggling post like:', err); //redundancy (issues will be send to the console)
                    }
                });
            });

            // Comment likes basically the same logic as above. 
            const commentButtons = document.querySelectorAll('button[data-comment-id]');
            commentButtons.forEach(button => {
                const commentId = button.dataset.commentId;
                let liked = button.dataset.liked === 'True' || button.dataset.liked === 'true';

                if (liked) {
                    const bgSpan = button.querySelector('span.absolute');
                    if (bgSpan) bgSpan.classList.remove('translate-x-full');
                    const textSpan = button.querySelector('span.relative');
                    if (textSpan) textSpan.classList.add('text-white');
                }

                button.addEventListener('click', async (e) => {
                    e.preventDefault();

                    try {
                        const response = await fetch(`/comments/${commentId}/like`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        if (!response.ok) throw new Error('Network response was not ok');

                        const data = await response.json();
                        const countSpan = button.querySelector('.comment-like-count');
                        if (countSpan) countSpan.textContent = data.likeCount;

                        liked = !liked;
                        button.dataset.liked = liked;

                        const bgSpan = button.querySelector('span.absolute');
                        const textSpan = button.querySelector('span.relative');
                        if (liked) {
                            if (bgSpan) bgSpan.classList.remove('translate-x-full');
                            if (textSpan) textSpan.classList.add('text-white');
                        } else {
                            if (bgSpan) bgSpan.classList.add('translate-x-full');
                            if (textSpan) textSpan.classList.remove('text-white');
                        }
                    } catch (err) {
                        console.error('Error toggling comment like:', err);
                    }
                });
            });

        });

    </script>

<script>

    document.addEventListener("DOMContentLoaded", function () {
        // Post editing logic
        const editButton = document.getElementById('edit-post-button');
        const postText = document.getElementById('post-content');
        const editPostForm = document.getElementById('update-post-form');
        const cancelEditPostButton = document.getElementById("cancel-edit-post");

        if (editButton && postText && editPostForm && cancelEditPostButton) {
            // Show the edit form:
            editButton.addEventListener('click', () => {
                postText.classList.add('hidden');
                editPostForm.classList.remove('hidden');
                editButton.classList.add('hidden');
            });

            // Cancel Post edit
            cancelEditPostButton.addEventListener('click', () => {
                postText.classList.remove('hidden');
                editPostForm.classList.add('hidden');
                editButton.classList.remove('hidden');
            });
        }
    });
</script>

<script>
// Logic for editing comments:

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('[id^="edit-comment-button-"]').forEach(button => {
            const id = button.id.split('-').pop(); // gets the comment ID
            const commentText = document.getElementById(`comment_content-${id}`);
            const editForm = document.getElementById(`update-comment-form-${id}`);
            const cancelButton = document.getElementById(`cancel-edit-comment-${id}`);

            button.addEventListener('click', () => {
                commentText.classList.add('hidden');
                editForm.classList.remove('hidden');
                button.classList.add('hidden');
            });

            cancelButton.addEventListener('click', () => {
                commentText.classList.remove('hidden');
                editForm.classList.add('hidden');
                button.classList.remove('hidden');
            });
        });
    });
</script>
