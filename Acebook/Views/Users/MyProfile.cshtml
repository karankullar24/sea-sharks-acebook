@model User

@{
  int? userId = Context.Session.GetInt32("user_id");
}

@{
  string imagePath; 
  if (!string.IsNullOrEmpty(Model.ProfilePicturePath)){
    imagePath = Model.ProfilePicturePath;
  }
  else
  {
    imagePath = "/images/Placeholder.png";
  }
}

<div class="flex justify-center w-full mt-8">
  <!-- Outer container -->
  <div class="flex flex-col lg:flex-row w-full max-w-7xl gap-8">

    <!-- 🧍 Left column: profile picture + bio + friends -->
    <div class="flex flex-col sticky top-32 self-start items-center w-full lg:w-1/3 space-y-6">
      <!-- Profile Picture (hover reveal) -->
      <div class="relative group flex justify-center w-full hover:-translate-y-1">
        <img id="profile-pic" src="@imagePath" 
          alt="Profile Picture"
          class="object-cover w-48 h-48 rounded-full border border-gray-400 shadow-sm transition-opacity duration-300 group-hover:opacity-50 cursor-pointer" />
        <div
          class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
          <form asp-action="UploadProfilePicture" asp-controller="Users" method="post" enctype="multipart/form-data">
          @Html.AntiForgeryToken()
            <label data-testid="changing-profile-picture-testing" class="cursor-pointer text-white text-sm bg-gray-800 bg-opacity-70 px-3 py-1 rounded-md z-100 pointer-events-auto">
              Change Picture
              <input type="file" name="profilePicture" accept="image/*" class="hidden" onchange="this.form.submit();" />
            </label>
          </form>

        </div>
      </div>

      <!-- Profile bio block -->
      <div class="bg-white rounded-lg p-4 shadow-md w-full max-w-xs transition hover:shadow-xl hover:-translate-y-1">
        <h2 data-testid="bio-name" class="text-md mb-3 text-gray-500 font-semibold border-b pb-2"> @Model.FirstName's
          Bio</h2>

        <div class="group flex items-center justify-between mb-4 rounded-lg mb-1 transition">
          <ul>
            <li data-testid="bio-tagline" class="italic text-gray-400 mt-1">@Model.ProfileBio.Tagline</li>
            <li data-testid="bio-age" class="text-gray-400 mt-1">Age: @Model.ProfileBio.Age</li>
            <li data-testid="bio-relationshipstatus" class="text-gray-400 mt-1">Relationship Status:
              @Model.ProfileBio.RelationshipStatus</li>
            <li data-testid="bio-pets" class="text-gray-400 mt-1">Pets: @Model.ProfileBio.Pets</li>
            <li data-testid="bio-job" class="text-gray-400 mt-1 mb-2">Job: @Model.ProfileBio.Job</li>
          </ul>
        </div>

        <a asp-controller="Users" asp-action="Update" asp-route-id="@userId" id="edit-bio" method="get"
          class="text-teal-500 hover:underline text-sm cursor-pointer">
          Edit bio
        </a>
      </div>


      <!-- Friends block -->
      <div class="bg-white rounded-lg p-4 shadow-md w-full max-w-xs transition hover:shadow-xl hover:-translate-y-1">
        <h2 data-testid="friends-header" class="text-md mb-3 text-gray-500 font-semibold border-b pb-2">Fronds</h2>
        @foreach (var friend in ViewBag.Friends)
        {
          User other;
          if (friend.RequesterId == ViewBag.ProfileUserId)
          {
            other = friend.Accepter;
          }
          else
          {
            other = friend.Requester;
          }

          string otherImagePath; 
            if (!string.IsNullOrEmpty(other.ProfilePicturePath)){
                otherImagePath = other.ProfilePicturePath;
            }
            else
            {
                otherImagePath = "/images/Placeholder.png";
            }

          <div class="group flex items-center justify-between hover:bg-gray-100 rounded-lg mb-2 p-1 transform transition duration-200 hover:scale-105">
            <div class="flex items-center space-x-3">
              <img src="@otherImagePath" class="w-10 h-10 rounded-full object-cover border border-gray-300">
              <a asp-controller="Users" asp-action="Index" asp-route-id="@other.Id" id="friend-name"
                data-testid="Friend-link @other.FirstName" method="get"
                class="text-xs font-medium text-gray-700 hover:text-teal-600">@other.FirstName
                @other.LastName</a>
            </div>

            <!-- Dots only appear on hover -->
            <button class="hidden group-hover:block text-gray-500 hover:text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24"
                stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6h.01M12 12h.01M12 18h.01" />
              </svg>
            </button>
          </div>
        }

        <a asp-controller="Friends" asp-action="Index" id="see-all-friends" data-testid="see-all-friends" method="get"
          class="text-teal-500 hover:underline text-sm cursor-pointer">
          See All Friends
        </a>
      </div>
    </div>

    <!-- 📜 Right column: profile name + edit tagline + posts -->
    <div class="flex flex-col w-full lg:w-2/3 space-y-6 bg-teal-700/10 shadow-[0_0_15px_rgba(15,118,110,0.3)]">

      <!-- Profile Name + Tagline -->
      <div class="bg-white rounded-lg p-6 shadow-md transition hover:shadow-xl hover:-translate-y-1">
        <h1 class="text-4xl font-bold text-teal-700 mb-2">@Model.FirstName @Model.LastName</h1>

        <p id="under-name-tagline-text" data-testid="under-name-tagline-text" class="italic text-gray-400 mt-1">
          @(Model.ProfileBio.Tagline ?? "Just keep swimming!")
        </p>

        <!-- Tagline and edit tagline -->
        <form asp-action="Update" asp-controller="Users" asp-route-id="@userId" method="post" id="tagline-form"
          data-testid="tagline-form" label="update tagline form" class="hidden">
          @Html.AntiForgeryToken()
          <input type="text" name="tagline" label="update tagline box" id="tagline-input" data-testid="tagline-input"
            class="border border-gray-300 rounded-md p-2 w-full" asp-for="ProfileBio.Tagline" />
          <input type="hidden" asp-for="ProfileBio.RelationshipStatus" name="relationshipStatus"
            id="relationshipstatus" />
          <input type="hidden" asp-for="ProfileBio.Pets" name="pets" id="pets" />
          <input type="hidden" asp-for="ProfileBio.Job" name="job" id="job" />
          <input type="hidden" value="@userId" name="id" id="userid" />
          <button type="button" id="cancel-edit"
            class="bg-gray-300 text-gray-800 text-sm w-36 px-4 py-2 rounded-md hover:bg-gray-400 mt-2"> Cancel
          </button>
          <button id="tagline-submit" data-testid="tagline-submit" type="submit"
            class="bg-teal-600 text-white text-sm font-medium w-36 px-4 py-2 rounded-md hover:bg-teal-400 mt-2">Save
            Changes
          </button>
        </form>

        <button id="update-tagline" class="text-teal-500 text-sm mt-4 rounded-md hover:underline transition">
          Edit tagline
        </button>
      </div>


      <!-- Create Post Form -->
      <div class="flex-1 bg-white rounded-lg overflow-y-auto px-4 py-4 p-4 shadow-md transition hover:shadow-xl space-x-3 hover:-translate-y-1">
        <h2 class="text-lg text-teal-700 font-bold px-3 mb-3">Start a feeding frenzy</h2>
        <form action="@Url.Action("Create", "Posts")" method="post" enctype="multipart/form-data" >
        @Html.AntiForgeryToken()
          <textarea required id="create-post-input" data-testid="create-post-input"
            class="w-full resize-none border p-3 rounded-md focus:outline-none focus:border-teal-500 focus:ring-2 focus:ring-gray-400 focus:ring-opacity-25 transition-shadow duration-200"
            name="content" maxlength="2000" placeholder="Make a splash! (max 2000 characters)"></textarea>

          
          <div class="flex justify-between items-center mt-3">
          <label for="file-upload" class="flex items-center text-sm text-teal-500 hover:underline">Attach Image</label>
            <input id="file-upload" type="file" name="postPicture" accept="image/*"class="hidden"/>
            <span id="file-name" class="text-gray-500 text-sm italic">No file chosen</span>
            <input type="hidden" name="WallId" value="@Model.Id" />
            <input type="hidden" name="returnUrl" value="@Url.Action("Index", "Users", new { id = Model.Id })" />
            <button id="post-submit" data-testid="create-post-submit" type="submit"
              class="bg-teal-600 text-white text-sm font-medium px-4 py-2 rounded-md hover:bg-teal-400 transition">
              Submit
            </button>
          </div>
        </form>
      </div>


      <!-- Posts Section -->
      <div class="flex flex-col w-full rounded-lg space-y-4 relative">
        <!-- Sticky Header -->
        <div class="sticky top-32 z-20 py-1 px-4 rounded-md">
          <div class="flex items-center justify-between">
            <!-- Left: Title -->
            <h1 class="text-3xl font-bold text-teal-700">My Tank</h1>

            <!-- Right: Back to Top -->
            <button id="back-to-top"
                    class="bg-teal-600 text-white p-3 rounded-full shadow-lg hover:bg-teal-500
                          transition-opacity duration-200 opacity-0 pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24"
                  stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
              </svg>
            </button>
          </div>
        </div>


        <!-- Scrollable Post List with Clipping -->
        <div class="relative overflow-hidden">
          <div id="posts-container" class="overflow-y-auto max-h-[70vh] pb-10 space-y-6"
            style="mask-image: linear-gradient(to bottom, transparent 0%, black 20%); -webkit-mask-image: linear-gradient(to bottom, transparent 0%, black 1%);">

            @if (ViewBag.Posts == null || !((List<Post>)ViewBag.Posts).Any())
            {
              <div class="flex items-center justify-center py-8">
                <h3 class="text-teal-600 font-semibold">No posts yet!</h3>
              </div>
            }
            else
            {
              @foreach (Post post in ViewBag.Posts)
              {
              string profilePictureImagePath; 
      if (!string.IsNullOrEmpty(post.User.ProfilePicturePath)){
          profilePictureImagePath = post.User.ProfilePicturePath;
      }
      else
      {
          profilePictureImagePath = "/images/Placeholder.png";
      }
        <div class="bg-white rounded-lg w-[98%] p-4 mx-auto shadow-md transition hover:shadow-xl hover:-translate-y-1">
                  <div class="flex justify-between items-center">
                    <a asp-controller="Users" asp-action="Index" asp-route-id="@post.User.Id" id="post-user-name"
                      data-testid="Post-link @post.User.FirstName"
                      class="text-md font-semibold text-gray-800 hover:text-teal-600">@post.User.FirstName
                      @post.User.LastName</a>
                    <img src="@profilePictureImagePath" class="w-10 h-10 rounded-full object-cover border border-gray-400" />
                  </div>

          <p class="text-gray-700 mt-2 leading-relaxed break-words [overflow-wrap:anywhere] line-clamp-3">
          @if(!string.IsNullOrEmpty(post.Content)){
            @if (@post.CheckLength())
            {
            @post.Content
            }
            else
            {
            @post.FormatPostContent()
            }
            }
            else
            {
            @post.Content;
            }
          </p>
          @if (@post.PostPicturePath != null)
          {
            <div class="w-full text-center">
              <img id="post-picture-@post.Id" data-testid="post-picture-@post.Id" src="@post.PostPicturePath" alt="Post Picture"
              class="post-picture max-w-[65%] h-auto inline-block object-contain rounded-md" />
              </div>
          }

                  <div class="flex justify-end mt-2">
                    <a asp-controller="Posts" asp-action="Post" asp-route-id="@post.Id" method="get">
                      <button data-testid="see-more-button" class="text-teal-600 text-sm hover:underline">see more</button>
                    </a>
                  </div>

                  <p class="text-xs text-gray-400 mt-4">Created on: @post.FormattedCreatedOn</p>

                  <div class="flex border-t border-gray-200 divide-x divide-gray-200 justify-around mt-4 pt-3">

                    <!-- Like -->
                    <button
                      class="relative flex-1 inline-flex items-center justify-center overflow-hidden text-gray-600 text-sm bg-transparent hover:bg-white group py-2 px-4 font-medium transition-all"
                      data-testid="post-like-button" data-post-id="@post.Id"
                      data-liked="@post.Likes.Any(l => l.UserId == Context.Session.GetInt32("user_id"))">
                      <span
                        class="absolute w-96 h-72 bg-teal-600 bottom-0 left-0 translate-x-full translate-y-full ease-out duration-500 transition-all group-hover:translate-x-0 group-hover:translate-y-0"></span>
                      <span data-testid='home-post-like-total'
                        class="relative text-gray-600 transition-colors duration-300 ease-in-out group-hover:text-white">
                        Like (<span class="like-count">@post.Likes.Count()</span>)
                      </span>
                    </button>

                    <!-- Comment -->
                    <a asp-controller="Posts" asp-action="Post" asp-route-id="@post.Id" data-testid="comment-button"
                      class="relative flex-1 inline-flex items-center justify-center overflow-hidden text-gray-600 text-sm bg-transparent hover:bg-white group py-2 px-4 font-medium transition-all">
                      <span
                        class="absolute w-96 h-72 bg-teal-600 bottom-0 left-0 translate-x-full translate-y-full ease-out duration-500 transition-all group-hover:translate-x-0 group-hover:translate-y-0"></span>
                      <span
                        class="relative text-gray-600 transition-colors duration-300 ease-in-out group-hover:text-white">
                        Comment (@post.Comments.Count())
                      </span>
                    </a>

                  </div>
                </div>
              }
            }
          </div>
        </div>
      </div>

      <!-- Fullscreen overlay for enlarged image -->
      <div id="image-overlay" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center hidden z-50">
        <img id="overlay-image" src="/images/Placeholder.png" alt="Enlarged Profile Picture"
          class="max-w-3xl w-11/12 md:w-auto rounded-lg shadow-lg cursor-pointer transition-transform duration-300 transform scale-100 hover:scale-105" />
      </div>

      <script>
        const csrf = document
        .querySelector('meta[name="request-verification-token"]')
        ?.getAttribute('content');
        document.addEventListener("DOMContentLoaded", function () {
          // 🟩 Tagline editing logic
          const button = document.getElementById('update-tagline');
          const text = document.getElementById('under-name-tagline-text');
          const form = document.getElementById('tagline-form');
          const cancel = document.getElementById("cancel-edit");

          if (button && text && form && cancel) {
            button.addEventListener('click', () => {
              text.classList.add('hidden');
              form.classList.remove('hidden');
              button.classList.add('hidden');
            });

            cancel.addEventListener('click', () => {
              text.classList.remove('hidden');
              form.classList.add('hidden');
              button.classList.remove('hidden');
            });
          }

          // 🟩 Profile picture enlarge logic
          const profilePic = document.getElementById("profile-pic");
          const overlay = document.getElementById("image-overlay");
          const overlayImage = document.getElementById("overlay-image");

          if (profilePic && overlay && overlayImage) {
            profilePic.addEventListener("click", () => {
              overlay.classList.remove("hidden");
              overlayImage.src = profilePic.src;
            });

            overlay.addEventListener("click", (e) => {
              if (e.target === overlay || e.target === overlayImage) {
                overlay.classList.add("hidden");
              }
            });
          }
        });

        // 🟩 like button logic
        document.addEventListener('DOMContentLoaded', () => {
          const likeButtons = document.querySelectorAll('button[data-post-id]');

          likeButtons.forEach(button => {
            const postId = button.dataset.postId;
            let liked = button.dataset.liked === 'True' || button.dataset.liked === 'true';

            const bgSpan = button.querySelector('span.absolute');
            const textSpan = button.querySelector('span.relative');

            if (liked) {
              bgSpan.classList.add('transition-none'); // disable transition
              bgSpan.classList.remove('translate-x-full', 'translate-y-full');
              textSpan.classList.remove('text-gray-600');
              textSpan.classList.add('text-white');

              requestAnimationFrame(() => {
                bgSpan.classList.remove('transition-none');
              });
            }

            button.addEventListener('click', async () => {
              try {
                const response = await fetch(`/posts/${postId}`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json',
                  'RequestVerificationToken': csrf }
                });

                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                const countSpan = button.querySelector('.like-count');
                countSpan.textContent = data.likeCount;

                liked = !liked; // Toggle state
                button.dataset.liked = liked;

                if (liked) {
                  bgSpan.classList.remove('translate-x-full', 'translate-y-full');
                  textSpan.classList.remove('text-gray-600');
                  textSpan.classList.add('text-white');
                } else {
                  bgSpan.classList.add('translate-x-full', 'translate-y-full');
                  textSpan.classList.remove('text-white');
                  textSpan.classList.add('text-gray-600');
                }
              } catch (err) {
                console.error('Error toggling like:', err);
              }
            });
          });
        });
      </script>

<script>
  // 🟩 Post picture enlarge logic
  document.addEventListener('DOMContentLoaded', () => {
    const pics = document.querySelectorAll('.post-picture');
    const overlay = document.getElementById('image-overlay');
    const overlayImage = document.getElementById('overlay-image');

    pics.forEach(img => {
      img.addEventListener('click', () => {
        overlayImage.src = img.src;
        overlay.classList.remove('hidden');
      });
    });

    // Close on outside click or ESC
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) overlay.classList.add('hidden');
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') overlay.classList.add('hidden');
    });
  });
</script>


<script>
  const fileInput = document.getElementById("file-upload");
  const fileNameDisplay = document.getElementById("file-name");
  fileInput.addEventListener("change", function () {
    // If at least one file is chosen
    if (fileInput.files.length > 0) {
      fileNameDisplay.textContent = fileInput.files[0].name;
      fileNameDisplay.classList.remove("text-gray-500", "italic");
      fileNameDisplay.classList.add("text-teal-700", "font-medium");
    } else {
      // Reset text if no file is chosen
      fileNameDisplay.textContent = "No file chosen";
      fileNameDisplay.classList.add("text-gray-500", "italic");
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('posts-container');
    const backToTop = document.getElementById('back-to-top');
    if (!container || !backToTop) return; // guard

    const toggleBtn = () => {
      if (container.scrollTop > 100) {
        backToTop.classList.remove('opacity-0', 'pointer-events-none');
        backToTop.classList.add('opacity-100');
      } else {
        backToTop.classList.add('opacity-0', 'pointer-events-none');
        backToTop.classList.remove('opacity-100');
      }
    };

    container.addEventListener('scroll', toggleBtn, { passive: true });
    toggleBtn(); // initialise state

    backToTop.addEventListener('click', () => {
      container.scrollTo({ top: 0, behavior: 'smooth' });
    });
  });
</script>